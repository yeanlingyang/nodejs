登陆拦截（登陆状态保持）： 
    在用户访问其他页面时（除了登陆页）， 判断用户之前是否登陆过，如果登陆过就继续访问，
    如果没有登陆 去登录页

1- http协议是无状态 无记忆的；
    在很早的是， 网络上只有html 静态页面， 页面就是 展示信息， 只要输入正确网址就会返回对应页面，就可以浏览网页；

    同一个客户端两次请求，是没有关联的；

    公交车司机： 无记忆无状态；

    后来有些 有些网站 需要会员 、 购物网站、 服务器就需要来识别当前用户了， 需要用户登陆才能访问；

    问题： http协议是无状态， 导致用户的登陆状态无法保持；


2- 希望保持用户的登陆状态， 希望服务器识别和记住用户状态 ：cookie + session 来解决
    cookie 是浏览器中存储数据容器；
        1- cookie 容量小 4kb 
        2- 在每次请求服务器时，cookie会自动把数据传递给服务器

    session 是服务器中存储数的容器；

 3- 用cookie 和session实现 服务器能够识别不同的用户；
    在用户第一访问服务器器，服务器会给当前用户开辟以离开sesion空间，用于存储用户信息，还会生成一个唯一标识，返回给用户cookie中； 以后用户再来访问服务区， 会携带标识当服务器，服务器根据标识即可识别不同用户；

 4-  在用户访问其他页面时（除了登陆页）， 判断用户之前是否登陆过，
    1-  在用户登陆成功时， 在服务器的session中添加一个登陆的标记；
    2-  后续访问其他页面时， 判断用户之前是否登陆过，只需判断服务器中用户的session中 有没有登陆标记；
    3-  如果有登陆标记， 继续访问， 没有标记，去登陆页登陆；

    登陆过用户在服务器的session是有标记的， 没有登陆过的就没有标记；

5- 在node 用cookie 和session实现登陆  express-session 模块 


小结：
    1- cookie 和 session 为了解决http协议无状态无记忆的问题；
    2- cookie 和 session的配合 可以让服务器区别不同的用户 
    3- cookie 主要用于存放 唯一标识，供服务器进行区分 
    4- 服务器会给每个用户开辟一个sesison区域，存储用户状态 （包括用户登陆状态）

    做登陆拦截：判断用户之前是否登陆过：
    1- 在有用户登陆成功时，给当前用户session添加标记 req.session.isLogin = true;
    2- 在用户访问其他页面是， 判断用户的session中是否存储有登陆标记，有就通过next() ,没有就去登陆页；